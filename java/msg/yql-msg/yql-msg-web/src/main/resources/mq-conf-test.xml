<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:amq="http://activemq.apache.org/schema/core"
	xmlns:jms="http://www.springframework.org/schema/jms" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="
        http://www.springframework.org/schema/beans     
        http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-4.1.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd
        http://www.springframework.org/schema/jms
        http://www.springframework.org/schema/jms/spring-jms-4.1.xsd
        http://activemq.apache.org/schema/core
        http://activemq.apache.org/schema/core/activemq-core-5.12.1.xsd"
	default-lazy-init="true">

	<!-- 真正可以产生Connection的ConnectionFactory，由对应的 JMS服务厂商提供 -->
	<bean id="targetConnectionFactory" class="org.apache.activemq.ActiveMQConnectionFactory">
		<!-- ActiveMQ服务地址 -->
		<property name="brokerURL" value="${mq.url}" />
		<property name="userName" value="${mq.user}"></property>
		<property name="password" value="${mq.password}"></property>
	</bean>

	<!-- ActiveMQ为我们提供了一个PooledConnectionFactory，通过往里面注入一个ActiveMQConnectionFactory 
		可以用来将Connection、Session和MessageProducer池化，这样可以大大的减少我们的资源消耗。 要依赖于 activemq-pool包 -->
	<bean id="pooledConnectionFactory" class="org.apache.activemq.pool.PooledConnectionFactory">
		<property name="connectionFactory" ref="targetConnectionFactory" />
		<property name="maxConnections" value="${mq.max.connection}" />
	</bean>

	<!-- Spring用于管理真正的ConnectionFactory的ConnectionFactory -->
	<bean id="connectionFactory"
		class="org.springframework.jms.connection.SingleConnectionFactory">
		<!-- 目标ConnectionFactory对应真实的可以产生JMS Connection的ConnectionFactory -->
		<property name="targetConnectionFactory" ref="pooledConnectionFactory" />
	</bean>

	<!-- Spring提供的JMS工具类，它可以进行消息发送、接收等 -->

	<!-- 通知队列模板 -->
	<bean id="jmsTemplate" class="org.springframework.jms.core.JmsTemplate">
		<!-- 这个connectionFactory对应的是我们定义的Spring提供的那个ConnectionFactory对象 -->
		<property name="connectionFactory" ref="connectionFactory" />
		<!-- 下面的通知队列根据具体业务具体设置 -->
		<!-- <property name="defaultDestinationName" value="${mq.queue.name}" /> -->
		<!-- true是topic，false是queue，默认是false，此处显示写出false -->
		<!-- <property name="pubSubDomain" value="false" /> -->
	</bean>

	<!-- <amq:connectionFactory id="amqConnectionFactory" brokerURL="${mq.url}" 
		userName="${mq.user}" password="${mq.password}" /> 配置JMS连接工厂 <bean id="connectionFactory" 
		class="org.springframework.jms.connection.CachingConnectionFactory"> <constructor-arg 
		ref="amqConnectionFactory" /> <property name="sessionCacheSize" value="${mq.session.size}" 
		/> </bean> 定义消息队列（Queue） <bean id="defaultQueueDestination" class="org.apache.activemq.command.ActiveMQQueue"> 
		设置消息队列的名字 <constructor-arg> <value>${mq.queue.name}</value> </constructor-arg> 
		</bean> 配置JMS模板（Queue），Spring提供的JMS工具类，它发送、接收消息。 <bean id="jmsTemplate" class="org.springframework.jms.core.JmsTemplate"> 
		<property name="connectionFactory" ref="connectionFactory" /> <property name="defaultDestination" 
		ref="defaultQueueDestination" /> <property name="receiveTimeout" value="10000" 
		/> true是topic，false是queue，默认是false，此处显示写出false <property name="pubSubDomain" 
		value="false" /> </bean> -->

</beans>
