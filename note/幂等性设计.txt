公司商城系统分布式框架采用dubbo，dubbo是可以配置重试次数和超时时间，就是客户端调用
服务端如果遇到网络等问题在超时时间内未返回结果，dubbo会再次调用服务端。比如扣减库存
的服务，参数为商品id和扣减数量，我们传入参数为：iphone6的id和扣减数量为1，dubbo设置的超时
时间为3秒，如果3秒内未返回扣减结果，dubbo会再次调用该接口，这样iphone6的库存就可能出现问题。
所以此时我们就需要该接口具有幂等性。
幂等性就是说同一个接口不管调用多少次，都产生一样的效果或一样的结果。如上面iphone6的例子，我们
应该实现不管调用多少次，iphone6的库存只减少一个（当然这里是指同一个订单内的iphone6减库存的情况）。
1、天生具有幂等性的接口
   一：查询接口。查询接口在相同参数情况下不管调用多少次，结果是相同的（当然是指数据不变的情况下）。
	   接口发生重试都会在很短时间内，这段时间内数据基本是不会发生变化的。同理删除操作也是幂等。
   二：类似更新用户信息。比如将用户的昵称更新为张三，这种更新操作是幂等的。
2、通过数据库实现幂等
   如新增用户的接口，目前用户注册我们通过使用手机号，这样可以设置手机号字段唯一约束。
   或者使用类似的sql语句:insert into user (field...) select 用户信息 from dual where not exists 
   (select 1 from user u where u.phone=?)
3、调整业务需求来实现幂等
   如用户订单支付成功需要增加积分，可能有的会直接在计分表中加积分，其实这里可以改为以下方式：
   首先给积分记录表增加一条记录（这里需要实现幂等），然后将积分记录表的积分合计结果来更新积分表的积分。
4、使用乐观锁来实现幂等
   比如商品减库存接口，我们可以在库存表中增加一个version字段，更新商品库存时采用如下方式更新：
   一、select * from goods where goods_id=?获取商品库存和版本信息
   二、update goods set stock=stock+(库存变动值),version=version+1 where goods_id=? and version=?;
   目前大部分商品信息和商品库存都会放在缓存中，如redis中，我们可以使用redis的watch、multi，exec，discard来实现幂等。
5、使用状态来实现幂等
   如订单支付成功，我们需要将订单状态更新为已支付，那sql语句可以采用如下写法：
   update orders set status='已支付的code' where order_id = ? and status='未支付的code';

   